[{"/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/App.js":"1","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/index.js":"2"},{"size":6763,"mtime":1619940455733,"results":"3","hashOfConfig":"4"},{"size":544,"mtime":1610655809318,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"dbxwgj",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/App.js",["11","12","13","14","15","16"],"import { Button, Menu, Select } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport 'microphone-stream';\nimport io from 'socket.io-client';\nimport { VictoryChart, VictoryLine, VictoryLabel, VictoryTheme, VictoryScatter, VictoryLegend } from \"victory\";\nimport { blue, yellow, cyan, orange, green, magenta } from '@ant-design/colors';\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    var socket = io(\"http://localhost:5000/test\");\n    this.state = {\n      started : false,\n      microphone : null,\n      socket: socket,\n      lenSamples : 0,\n      globalTempo: \"none\",\n      globalVolume: \"none\",\n      tempoData: [],\n      volumeData: [],\n      tempoVolume: [{x: 0, y: 0}],\n      pTempoVolumes: null,\n      song: \"Prelude in E Minor\",\n      printed: false\n    };\n\n    this.pieceChange = this.pieceChange.bind(this);\n  }\n  componentDidMount() {\n  }\n  enterLoading = () => {\n    var ob = this;\n    this.state.socket.connect();\n    navigator.mediaDevices\n      .getUserMedia({ audio: true }).then((stream) => {\n        var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        var source = audioContext.createMediaStreamSource(stream);\n        var node = audioContext.createScriptProcessor(4096, 1, 1);\n        var winLength = 1;\n        this.state.socket.emit('sample_rate', audioContext.sampleRate);\n        \n        node.onaudioprocess = (audioProcessingEvent) => {\n            // The input buffer is the song we loaded earlier\n          let inputBuffer = audioProcessingEvent.inputBuffer;\n          var left = inputBuffer.getChannelData(0);\n          var obj = {};\n          left.forEach((elem, i) => {\n            obj[i] = elem;\n          })\n          this.state.socket.emit(\"send_audio\", obj);\n          this.setState({lenSamples : this.state.lenSamples + 1})\n          // take 1 seconds of samples\n          if(this.state.lenSamples >= (winLength * audioContext.sampleRate) / 4096 ) {\n            this.setState({lenSamples : 0 });\n            this.state.socket.emit('tempo', this.state.song, true);\n          }\n        }\n        this.state.socket.on('output local tempo', ({tempo, volume, p_volume, p_tempo}) => {\n          this.setState({\n            tempoData: [...this.state.tempoData, {x: this.state.tempoData.length * winLength, y: tempo}],\n            // pTempoData: [...this.state.pTempoData, {x: this.state.pTempoData.length * winLength, y: p_tempo}],\n            // pVolumeData: [...this.state.pVolumeData, {x: this.state.pVolumeData.length * winLength, y: p_volume}],\n            volumeData: [...this.state.volumeData, {x: this.state.volumeData.length * winLength, y: volume}],\n            tempoVolume: [{x: tempo, y: volume}],\n            pTempoVolumes: {p_volume, p_tempo}\n          })\n        })\n        this.state.socket.on('output global tempo', ({tempo, volume}) => {\n          this.setState({\n            globalTempo : tempo + \" BPM\",\n            globalVolume : volume + \"db\"\n          })\n        })\n        // Connect the microphone to the script processor\n        source.connect(node);\n        node.connect(audioContext.destination);\n\n        this.setState({\n          source: source,\n          node: node\n        })\n      });\n  };\n  stop = () => {\n    if(this.state.source){\n      this.state.node.disconnect();\n      this.state.source.disconnect();\n      this.setState({\n        source: null,\n        node: null,\n      });\n    }\n  };\n  pieceChange = (song) => {\n    console.log(song);\n    this.setState({\n      song: song\n    })\n  };\n  windowChange = () => {\n\n  }\n  getColors = (length) => {\n    \n    return [[magenta.primary, \"Magenta\"], [cyan.primary, \"Cyan\"], [yellow.primary, \"Yellow\"], [orange.primary, \"Orange\"], [green.primary, \"Green\"]];\n  }\n  render() {\n    var scatters = [<VictoryScatter\n      key=\"1\"\n      style={{\n        data: { fill: blue.primary },\n        parent: { border: \"1px solid #ccc\"}\n      }}\n      data= {this.state.tempoVolume}\n      labels={({}) => \"Me\"}\n    />];\n    if(this.state.pTempoVolumes){\n      console.log(this.state.pTempoVolumes)\n      var colors = this.getColors();\n      Object.keys(this.state.pTempoVolumes.p_tempo).forEach((performer, i) => {\n        var volume = this.state.pTempoVolumes.p_volume[performer];\n        var tempo = this.state.pTempoVolumes.p_tempo[performer];\n        var tempoVolume = [{x : tempo, y : volume, label : performer}];  \n        scatters.push(<VictoryScatter\n          key={i}\n          style={{\n            data: { fill: colors[i][0] },\n            parent: { border: \"1px solid #ccc\"}\n          }}\n          data={tempoVolume}\n          labels={({ datum }) => datum.label}\n        />);\n      })\n    }\n    return (\n      <>\n        <div className=\"main-container\">\n          <div className=\"info-container\">\n          {/* <h3>Tempo(BPM)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            \n            <VictoryLine\n              // interpolation=\"natural\"\n              domain={{ y: [80, 160] }}\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoData}\n            />\n          </VictoryChart>\n          <h3>Volume(db)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ y: [70, 100] }}\n          >\n            <VictoryLine\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.volumeData}\n            />\n          </VictoryChart>\n           */}\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ x: [80, 160], y: [70, 100] }}\n          >\n            {scatters}\n          </VictoryChart>\n          </div>\n          <div className=\"flex-row\">\n            <div className=\"center-console\">\n              <Button type=\"primary\" onClick={() => this.enterLoading()}>\n                Start\n              </Button>\n              <Button type=\"danger\" onClick={() => this.stop()}>\n                Stop\n              </Button>\n              <Select defaultValue=\"Prelude in E Minor\" style={{ width: 300 }} onChange={this.pieceChange}>\n                <Option value=\"Widmung\">Schumann-Liszt Widmung</Option>\n                <Option value=\"Prelude in E Minor\">\n                  Chopin Prelude in E Minor\n                </Option>\n                <Option value=\"Fantasie Impromptu\">\n                  Chopin Fantasie Impromptu\n                </Option>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/index.js",[],{"ruleId":"17","severity":1,"message":"18","line":1,"column":18,"nodeType":"19","messageId":"20","endLine":1,"endColumn":22},{"ruleId":"17","severity":1,"message":"21","line":6,"column":24,"nodeType":"19","messageId":"20","endLine":6,"endColumn":35},{"ruleId":"17","severity":1,"message":"22","line":6,"column":37,"nodeType":"19","messageId":"20","endLine":6,"endColumn":49},{"ruleId":"17","severity":1,"message":"23","line":6,"column":81,"nodeType":"19","messageId":"20","endLine":6,"endColumn":94},{"ruleId":"17","severity":1,"message":"24","line":36,"column":9,"nodeType":"19","messageId":"20","endLine":36,"endColumn":11},{"ruleId":"25","severity":1,"message":"26","line":119,"column":16,"nodeType":"27","messageId":"28","endLine":119,"endColumn":18},"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'VictoryLine' is defined but never used.","'VictoryLabel' is defined but never used.","'VictoryLegend' is defined but never used.","'ob' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected"]