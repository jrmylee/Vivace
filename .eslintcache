[{"/Users/jrmylee/Documents/dev/projects/mir/projects/kraken/src/App.js":"1","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/App.js":"2","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/reportWebVitals.js":"3","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/index.js":"4"},{"size":7172,"mtime":1609611850857,"results":"5","hashOfConfig":"6"},{"size":7156,"mtime":1609778046707,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1609777522004,"results":"9","hashOfConfig":"8"},{"size":566,"mtime":1609777522002,"results":"10","hashOfConfig":"8"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12z1rlu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"dbxwgj",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jrmylee/Documents/dev/projects/mir/projects/kraken/src/App.js",["20"],"/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/App.js",["21"],"import { Button, Menu, Select } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport 'microphone-stream';\nimport io from 'socket.io-client';\nimport { VictoryChart, VictoryLine, VictoryTheme, VictoryScatter } from \"victory\";\nimport { blue, magenta, cyan } from '@ant-design/colors';\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    var socket = io(\"http://localhost:5000/test\");\n    this.state = {\n      started : false,\n      microphone : null,\n      socket: socket,\n      lenSamples : 0,\n      globalTempo: \"none\",\n      globalVolume: \"none\",\n      tempoData: [],\n      pTempoData: [],\n      volumeData: [],\n      pVolumeData: [],\n      tempoVolume: [{x: 0, y: 0}]\n    };\n  }\n  menu = (\n    <Menu>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n          1 sec\n        </a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n          2 sec\n        </a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n          3 sec\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\n  pieces = (\n    <Menu>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n          Schumann/Liszt Widmung(Trifonov)\n        </a>\n      </Menu.Item>\n    </Menu>\n  )\n  enterLoading = () => {\n    var ob = this;\n    this.state.socket.connect();\n    navigator.mediaDevices\n      .getUserMedia({ audio: true }).then((stream) => {\n        var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        var source = audioContext.createMediaStreamSource(stream);\n        var node = audioContext.createScriptProcessor(4096, 1, 1);\n        this.state.socket.emit('sample_rate', audioContext.sampleRate);\n        \n        node.onaudioprocess = (audioProcessingEvent) => {\n            // The input buffer is the song we loaded earlier\n          let inputBuffer = audioProcessingEvent.inputBuffer;\n          var left = inputBuffer.getChannelData(0);\n          var obj = {};\n          left.forEach((elem, i) => {\n            obj[i] = elem;\n          })\n          this.state.socket.emit(\"message\", obj);\n          this.setState({lenSamples : this.state.lenSamples + 1})\n          // take 3 seconds of samples\n          if(this.state.lenSamples >= (3 * audioContext.sampleRate) / 4096 ) {\n            this.setState({lenSamples : 0 });\n            this.state.socket.emit('tempo', true);\n          }\n        }\n        this.state.socket.on('output local tempo', ({tempo, volume}) => {\n          this.setState({\n            tempoData: [...this.state.tempoData, {x: this.state.tempoData.length * 3, y: tempo}],\n            // pTempoData: [...this.state.pTempoData, {x: this.state.tempoData.length * 3, y: p_tempo}],\n            // pVolumeData: [...this.state.pVolumeData, {x: this.state.volumeData.length * 3, y: p_volume}],\n            volumeData: [...this.state.volumeData, {x: this.state.volumeData.length * 3, y: volume}],\n            tempoVolume: [{x: tempo, y: volume}],\n            // pTempoVolume: [{x: p_tempo, y: p_volume}]\n          })\n        })\n        this.state.socket.on('output global tempo', ({tempo, volume}) => {\n          this.setState({\n            globalTempo : tempo + \" BPM\",\n            globalVolume : volume + \"db\"\n          })\n        })\n        // Connect the microphone to the script processor\n        source.connect(node);\n        node.connect(audioContext.destination);\n\n        this.setState({\n          source: source,\n          node: node\n        })\n      });\n  };\n  stop = () => {\n    if(this.state.source){\n      this.state.socket.emit(\"tempo\", false);\n      console.log(this.state.signal);\n      this.state.node.disconnect();\n      this.state.source.disconnect();\n      this.setState({\n        source: null,\n        node: null,\n      });\n    }\n  };\n  pieceChange = () => {\n\n  };\n  windowChange = () => {\n\n  }\n  render() {\n    return (\n      <>\n        <div className=\"main-container\">\n          <div className=\"info-container\">\n          <h3>Tempo(BPM)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            <VictoryLine\n              interpolation=\"natural\"\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoData}\n            />\n            {/* <VictoryLine\n              interpolation=\"natural\"\n              style={{\n                data: { stroke: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pTempoData}\n            /> */}\n          </VictoryChart>\n          <h3>Volume(db)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            <VictoryLine\n              style={{\n                data: { stroke: magenta.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.volumeData}\n            />\n            {/* <VictoryLine\n              style={{\n                data: { stroke: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pVolumeData}\n            /> */}\n          </VictoryChart>\n          <h3>Tempo vs Volume</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ x: [70, 200], y: [70, 150] }}\n          >\n            <VictoryScatter\n              style={{\n                data: { fill: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoVolume}\n            />\n            {/* <VictoryScatter\n              style={{\n                data: { fill: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pTempoVolume}\n            /> */}\n          </VictoryChart>\n          </div>\n          <div className=\"flex-row\">\n            <div>\n              <h3>Global Tempo: {this.state.globalTempo}</h3>\n              <h3>Global Volume: {this.state.globalVolume}</h3>\n            </div>\n            <div className=\"center-console\">\n              <Button type=\"primary\" onClick={() => this.enterLoading()}>\n                Start\n              </Button>\n              <Button type=\"danger\" onClick={() => this.stop()}>\n                Stop\n              </Button>\n              <Select defaultValue=\"widmung\" style={{ width: 120 }} onChange={() => this.pieceChange()}>\n                <Option value=\"widmung\">Widmung</Option>\n              </Select>\n              <Select defaultValue=\"3\" style={{ width: 120 }} onChange={() => this.windowChange()}>\n                <Option value=\"3\">3 Secs</Option>\n                <Option value=\"3\">6 Secs</Option>\n                <Option value=\"3\">9 Secs</Option>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/reportWebVitals.js",[],"/Users/jrmylee/Documents/dev/projects/mir/projects/vivace/src/index.js",[],{"ruleId":"22","severity":1,"message":"23","line":59,"column":9,"nodeType":"24","messageId":"25","endLine":59,"endColumn":11},{"ruleId":"22","severity":1,"message":"23","line":59,"column":9,"nodeType":"24","messageId":"25","endLine":59,"endColumn":11},"no-unused-vars","'ob' is assigned a value but never used.","Identifier","unusedVar"]