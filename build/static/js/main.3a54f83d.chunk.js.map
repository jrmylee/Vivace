{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Option","Select","App","props","pieces","Item","target","rel","enterLoading","state","socket","connect","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","node","createScriptProcessor","emit","sampleRate","onaudioprocess","audioProcessingEvent","left","inputBuffer","getChannelData","obj","forEach","elem","i","setState","lenSamples","on","tempo","volume","p_volume","p_tempo","tempoData","x","length","y","pTempoData","pVolumeData","volumeData","tempoVolume","pTempoVolume","globalTempo","globalVolume","destination","stop","console","log","signal","disconnect","pieceChange","windowChange","io","started","microphone","className","title","centerTitle","orientation","gutter","colorScale","data","name","theme","VictoryTheme","material","interpolation","style","stroke","blue","primary","parent","border","this","cyan","domain","fill","type","onClick","defaultValue","width","onChange","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a54f83d.chunk.js","sourcesContent":["import { Button, Menu, Select } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport 'microphone-stream';\nimport io from 'socket.io-client';\nimport { VictoryChart, VictoryLine, VictoryTheme, VictoryScatter, VictoryLegend } from \"victory\";\nimport { blue, magenta, cyan } from '@ant-design/colors';\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    var socket = io(\"https://tonetwelve.com/test\");\n    this.state = {\n      started : false,\n      microphone : null,\n      socket: socket,\n      lenSamples : 0,\n      globalTempo: \"none\",\n      globalVolume: \"none\",\n      tempoData: [],\n      pTempoData: [],\n      volumeData: [],\n      pVolumeData: [],\n      tempoVolume: [{x: 0, y: 0}]\n    };\n  }\n  pieces = (\n    <Menu>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\">\n          Schumann/Liszt Widmung(Trifonov)\n        </a>\n      </Menu.Item>\n    </Menu>\n  )\n  enterLoading = () => {\n    var ob = this;\n    this.state.socket.connect();\n    navigator.mediaDevices\n      .getUserMedia({ audio: true }).then((stream) => {\n        var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        var source = audioContext.createMediaStreamSource(stream);\n        var node = audioContext.createScriptProcessor(4096, 1, 1);\n        var winLength = 1;\n        this.state.socket.emit('sample_rate', audioContext.sampleRate);\n        \n        node.onaudioprocess = (audioProcessingEvent) => {\n            // The input buffer is the song we loaded earlier\n          let inputBuffer = audioProcessingEvent.inputBuffer;\n          var left = inputBuffer.getChannelData(0);\n          var obj = {};\n          left.forEach((elem, i) => {\n            obj[i] = elem;\n          })\n          this.state.socket.emit(\"message\", obj);\n          this.setState({lenSamples : this.state.lenSamples + 1})\n          // take 3 seconds of samples\n          if(this.state.lenSamples >= (winLength * audioContext.sampleRate) / 4096 ) {\n            this.setState({lenSamples : 0 });\n            this.state.socket.emit('tempo', true);\n          }\n        }\n        this.state.socket.on('output local tempo', ({tempo, volume, p_volume, p_tempo}) => {\n          this.setState({\n            tempoData: [...this.state.tempoData, {x: this.state.tempoData.length * winLength, y: tempo}],\n            pTempoData: [...this.state.pTempoData, {x: this.state.tempoData.length * winLength, y: p_tempo}],\n            pVolumeData: [...this.state.pVolumeData, {x: this.state.volumeData.length * winLength, y: p_volume}],\n            volumeData: [...this.state.volumeData, {x: this.state.volumeData.length * winLength, y: volume}],\n            tempoVolume: [{x: tempo, y: volume}],\n            pTempoVolume: [{x: p_tempo, y: p_volume}]\n          })\n        })\n        this.state.socket.on('output global tempo', ({tempo, volume}) => {\n          this.setState({\n            globalTempo : tempo + \" BPM\",\n            globalVolume : volume + \"db\"\n          })\n        })\n        // Connect the microphone to the script processor\n        source.connect(node);\n        node.connect(audioContext.destination);\n\n        this.setState({\n          source: source,\n          node: node\n        })\n      });\n  };\n  stop = () => {\n    if(this.state.source){\n      this.state.socket.emit(\"tempo\", false);\n      console.log(this.state.signal);\n      this.state.node.disconnect();\n      this.state.source.disconnect();\n      this.setState({\n        source: null,\n        node: null,\n      });\n    }\n  };\n  pieceChange = () => {\n\n  };\n  windowChange = () => {\n\n  }\n  render() {\n    return (\n      <>\n        <div className=\"main-container\">\n          <div className=\"info-container\">\n          <VictoryLegend x={125} y={10}\n            title=\"Performer Legend\"\n            centerTitle\n            orientation=\"horizontal\"\n            gutter={20}\n            colorScale={[\"blue\", \"cyan\" ]}\n            data={[\n              { name: \"User\" }, { name: \"Performer\" }\n            ]}\n          />\n          <h3>Tempo(BPM)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            \n            <VictoryLine\n              interpolation=\"natural\"\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoData}\n            />\n            <VictoryLine\n              interpolation=\"natural\"\n              style={{\n                data: { stroke: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pTempoData}\n            />\n          </VictoryChart>\n          <h3>Volume(db)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            <VictoryLine\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.volumeData}\n            />\n            <VictoryLine\n              style={{\n                data: { stroke: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pVolumeData}\n            />\n          </VictoryChart>\n          <h3>Tempo vs Volume</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ x: [70, 200], y: [70, 150] }}\n          >\n            <VictoryScatter\n              style={{\n                data: { fill: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoVolume}\n            />\n            <VictoryScatter\n              style={{\n                data: { fill: cyan.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.pTempoVolume}\n            />\n          </VictoryChart>\n          </div>\n          <div className=\"flex-row\">\n            <div>\n              <h3>Global Tempo: {this.state.globalTempo}</h3>\n              <h3>Global Volume: {this.state.globalVolume}</h3>\n            </div>\n            <div className=\"center-console\">\n              <Button type=\"primary\" onClick={() => this.enterLoading()}>\n                Start\n              </Button>\n              <Button type=\"danger\" onClick={() => this.stop()}>\n                Stop\n              </Button>\n              <Select defaultValue=\"widmung\" style={{ width: 300 }} onChange={() => this.pieceChange()}>\n                <Option value=\"widmung\">Widmung by Schumann/Liszt</Option>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-header\">\n    </div>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}