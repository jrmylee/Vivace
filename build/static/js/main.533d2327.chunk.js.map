{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Option","Select","App","props","enterLoading","state","socket","connect","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","node","createScriptProcessor","emit","sampleRate","onaudioprocess","audioProcessingEvent","left","inputBuffer","getChannelData","obj","forEach","elem","i","setState","lenSamples","song","on","tempo","volume","p_volume","p_tempo","tempoData","x","length","y","volumeData","tempoVolume","pTempoVolumes","globalTempo","globalVolume","destination","stop","disconnect","pieceChange","console","log","windowChange","getColors","magenta","primary","cyan","yellow","orange","green","io","started","microphone","printed","bind","scatters","style","data","fill","blue","parent","border","this","labels","colors","Object","keys","performer","label","push","datum","className","theme","VictoryTheme","material","domain","type","onClick","defaultValue","width","onChange","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.533d2327.chunk.js","sourcesContent":["import { Button, Menu, Select } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport 'microphone-stream';\nimport io from 'socket.io-client';\nimport { VictoryChart, VictoryLine, VictoryLabel, VictoryTheme, VictoryScatter, VictoryLegend } from \"victory\";\nimport { blue, yellow, cyan, orange, green, magenta } from '@ant-design/colors';\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    var socket = io(\"http://localhost:5000/test\");\n    this.state = {\n      started : false,\n      microphone : null,\n      socket: socket,\n      lenSamples : 0,\n      globalTempo: \"none\",\n      globalVolume: \"none\",\n      tempoData: [],\n      volumeData: [],\n      tempoVolume: [{x: 0, y: 0}],\n      pTempoVolumes: null,\n      song: \"Prelude in E Minor\",\n      printed: false\n    };\n\n    this.pieceChange = this.pieceChange.bind(this);\n  }\n  componentDidMount() {\n  }\n  enterLoading = () => {\n    var ob = this;\n    this.state.socket.connect();\n    navigator.mediaDevices\n      .getUserMedia({ audio: true }).then((stream) => {\n        var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        var source = audioContext.createMediaStreamSource(stream);\n        var node = audioContext.createScriptProcessor(4096, 1, 1);\n        var winLength = 1;\n        this.state.socket.emit('sample_rate', audioContext.sampleRate);\n        \n        node.onaudioprocess = (audioProcessingEvent) => {\n            // The input buffer is the song we loaded earlier\n          let inputBuffer = audioProcessingEvent.inputBuffer;\n          var left = inputBuffer.getChannelData(0);\n          var obj = {};\n          left.forEach((elem, i) => {\n            obj[i] = elem;\n          })\n          this.state.socket.emit(\"send_audio\", obj);\n          this.setState({lenSamples : this.state.lenSamples + 1})\n          // take 1 seconds of samples\n          if(this.state.lenSamples >= (winLength * audioContext.sampleRate) / 4096 ) {\n            this.setState({lenSamples : 0 });\n            this.state.socket.emit('tempo', this.state.song, true);\n          }\n        }\n        this.state.socket.on('output local tempo', ({tempo, volume, p_volume, p_tempo}) => {\n          this.setState({\n            tempoData: [...this.state.tempoData, {x: this.state.tempoData.length * winLength, y: tempo}],\n            // pTempoData: [...this.state.pTempoData, {x: this.state.pTempoData.length * winLength, y: p_tempo}],\n            // pVolumeData: [...this.state.pVolumeData, {x: this.state.pVolumeData.length * winLength, y: p_volume}],\n            volumeData: [...this.state.volumeData, {x: this.state.volumeData.length * winLength, y: volume}],\n            tempoVolume: [{x: tempo, y: volume}],\n            pTempoVolumes: {p_volume, p_tempo}\n          })\n        })\n        this.state.socket.on('output global tempo', ({tempo, volume}) => {\n          this.setState({\n            globalTempo : tempo + \" BPM\",\n            globalVolume : volume + \"db\"\n          })\n        })\n        // Connect the microphone to the script processor\n        source.connect(node);\n        node.connect(audioContext.destination);\n\n        this.setState({\n          source: source,\n          node: node\n        })\n      });\n  };\n  stop = () => {\n    if(this.state.source){\n      this.state.node.disconnect();\n      this.state.source.disconnect();\n      this.setState({\n        source: null,\n        node: null,\n      });\n    }\n  };\n  pieceChange = (song) => {\n    console.log(song);\n    this.setState({\n      song: song\n    })\n  };\n  windowChange = () => {\n\n  }\n  getColors = (length) => {\n    \n    return [[magenta.primary, \"Magenta\"], [cyan.primary, \"Cyan\"], [yellow.primary, \"Yellow\"], [orange.primary, \"Orange\"], [green.primary, \"Green\"]];\n  }\n  render() {\n    var scatters = [<VictoryScatter\n      key=\"1\"\n      style={{\n        data: { fill: blue.primary },\n        parent: { border: \"1px solid #ccc\"}\n      }}\n      data= {this.state.tempoVolume}\n      labels={({}) => \"Me\"}\n    />];\n    if(this.state.pTempoVolumes){\n      console.log(this.state.pTempoVolumes)\n      var colors = this.getColors();\n      Object.keys(this.state.pTempoVolumes.p_tempo).forEach((performer, i) => {\n        var volume = this.state.pTempoVolumes.p_volume[performer];\n        var tempo = this.state.pTempoVolumes.p_tempo[performer];\n        var tempoVolume = [{x : tempo, y : volume, label : performer}];  \n        scatters.push(<VictoryScatter\n          key={i}\n          style={{\n            data: { fill: colors[i][0] },\n            parent: { border: \"1px solid #ccc\"}\n          }}\n          data={tempoVolume}\n          labels={({ datum }) => datum.label}\n        />);\n      })\n    }\n    return (\n      <>\n        <div className=\"main-container\">\n          <div className=\"info-container\">\n          {/* <h3>Tempo(BPM)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n          >\n            \n            <VictoryLine\n              // interpolation=\"natural\"\n              domain={{ y: [80, 160] }}\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.tempoData}\n            />\n          </VictoryChart>\n          <h3>Volume(db)</h3>\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ y: [70, 100] }}\n          >\n            <VictoryLine\n              style={{\n                data: { stroke: blue.primary },\n                parent: { border: \"1px solid #ccc\"}\n              }}\n              data= {this.state.volumeData}\n            />\n          </VictoryChart>\n           */}\n          <VictoryChart\n            theme={VictoryTheme.material}\n            domain={{ x: [80, 160], y: [70, 100] }}\n          >\n            {scatters}\n          </VictoryChart>\n          </div>\n          <div className=\"flex-row\">\n            <div className=\"center-console\">\n              <Button type=\"primary\" onClick={() => this.enterLoading()}>\n                Start\n              </Button>\n              <Button type=\"danger\" onClick={() => this.stop()}>\n                Stop\n              </Button>\n              <Select defaultValue=\"Prelude in E Minor\" style={{ width: 300 }} onChange={this.pieceChange}>\n                <Option value=\"Widmung\">Schumann-Liszt Widmung</Option>\n                <Option value=\"Prelude in E Minor\">\n                  Chopin Prelude in E Minor\n                </Option>\n                <Option value=\"Fantasie Impromptu\">\n                  Chopin Fantasie Impromptu\n                </Option>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-header\">\n    </div>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}